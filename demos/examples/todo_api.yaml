name: "TODO REST API"
description: "A RESTful API for managing TODO items using FastAPI"
difficulty: "Intermediate"
time_estimate: "5-7 minutes"
detailed_description: |
  This example builds a complete REST API including:
  • Full CRUD operations (Create, Read, Update, Delete)
  • Data validation and error handling
  • Pagination for listing items
  • Auto-generated API documentation
  • Comprehensive test suite
  
  Great for learning API development patterns!

requirements: |
  Create a REST API for managing TODO items using FastAPI with the following features:
  
  1. TODO Model:
     - id (auto-generated UUID)
     - title (required, max 100 chars)
     - description (optional, max 500 chars)
     - completed (boolean, default false)
     - created_at (timestamp)
     - updated_at (timestamp)
  
  2. Endpoints:
     - POST /todos - Create a new TODO
     - GET /todos - List all TODOs with pagination (limit/offset)
     - GET /todos/{id} - Get a specific TODO by ID
     - PUT /todos/{id} - Update a TODO
     - DELETE /todos/{id} - Delete a TODO
     - GET /todos/stats - Get statistics (total, completed, pending)
  
  3. Features:
     - Input validation using Pydantic
     - Proper HTTP status codes
     - Error handling with meaningful messages
     - In-memory storage (dictionary) for simplicity
     - API documentation with Swagger UI
  
  4. Testing:
     - Unit tests for all endpoints
     - Test error cases (404, validation errors)
     - Test pagination

config:
  workflow_type: "tdd"
  run_tests: true
  run_integration_verification: true

expected_files:
  - main.py
  - models.py
  - test_api.py
  - requirements.txt
  - README.md